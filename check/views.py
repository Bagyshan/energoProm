from rest_framework import viewsets, views, generics
from rest_framework.permissions import IsAuthenticated, AllowAny
from .models import Check
from .serializers import CheckSerializer, PhotoUpdateSerializer, CheckVerificationUpdateSerializer, CheckShortListUnverifiedSerializer, CheckRetrieveUnverifiedSerializer
from django_filters.rest_framework import DjangoFilterBackend
from drf_yasg.utils import swagger_auto_schema
from drf_yasg import openapi
from drf_spectacular.utils import extend_schema
from rest_framework.decorators import action
from rest_framework import generics
from rest_framework.exceptions import ValidationError, NotFound
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.parsers import MultiPartParser, FormParser

class CheckViewSet(viewsets.ModelViewSet):
    queryset = Check.objects.all()
    serializer_class = CheckSerializer
    permission_classes = [IsAuthenticated]
    filter_backends = [DjangoFilterBackend]
    filterset_fields = ['house_card']

    @swagger_auto_schema(
        manual_parameters=[
            openapi.Parameter(
                'house_card',
                openapi.IN_QUERY,
                description="ID –æ–±—ä–µ–∫—Ç–∞ HouseCard –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —á–µ–∫–æ–≤",
                type=openapi.TYPE_INTEGER
            )
        ]
    )
    def list(self, request, *args, **kwargs):
        return super().list(request, *args, **kwargs)


@extend_schema(
    tags=['Last Check']
)
class LastCheckViewSet(viewsets.ReadOnlyModelViewSet):
    queryset = Check.objects.all()
    permission_classes = [IsAuthenticated]
    serializer_class = CheckSerializer
    filter_backends = [DjangoFilterBackend]
    filterset_fields = ['house_card']

    @swagger_auto_schema(
        manual_parameters=[
            openapi.Parameter(
                'house_card',
                openapi.IN_QUERY,
                description="ID –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á–µ—Ç–∞ (HouseCard ID)",
                type=openapi.TYPE_INTEGER,
                required=True
            )
        ],
        responses={200: CheckSerializer}
    )
    def list(self, request, *args, **kwargs):
        check = Check.objects.order_by('-created_at').first()
        if not check:
            raise NotFound('–°—á–µ—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.')

        serializer = CheckSerializer(check)
        return Response(serializer.data)
    

    @swagger_auto_schema(auto_schema=None)
    def retrieve(self, request, *args, **kwargs):
        return super().retrieve(request, *args, **kwargs)
    



# ============================== Graphic View ===================================

from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated
from rest_framework.exceptions import ValidationError
from drf_yasg.utils import swagger_auto_schema
from drf_yasg import openapi
from .models import Check
from .serializers import GraphicCheckSerializer

@extend_schema(
    tags=['Graphic Check']
)
class GraphicCheckListViewSet(viewsets.ReadOnlyModelViewSet):
    queryset = Check.objects.all()
    permission_classes = [IsAuthenticated]
    serializer_class = GraphicCheckSerializer
    filter_backends = [DjangoFilterBackend]
    filterset_fields = ['house_card']

    @swagger_auto_schema(
        manual_parameters=[
            openapi.Parameter(
                'house_card',
                openapi.IN_QUERY,
                description="ID –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á–µ—Ç–∞ (HouseCard ID)",
                type=openapi.TYPE_INTEGER,
                required=True
            )
        ],
        responses={200: GraphicCheckSerializer(many=True)}
    )
    def list(self, request, *args, **kwargs):

        checks = Check.objects.order_by('-created_at')
        serializer = GraphicCheckSerializer(checks, many=True)
        return Response(serializer.data)






# views.py (–¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é)
from drf_yasg.utils import swagger_auto_schema
from drf_yasg import openapi

@extend_schema(
    tags=['User Send Counter Photo']
)
class PhotoUpdateAPIView(generics.UpdateAPIView):
    queryset = Check.objects.all()
    serializer_class = PhotoUpdateSerializer
    parser_classes = [MultiPartParser, FormParser]
    http_method_names = ['patch']

    def get_object(self):
        return Check.objects.get(id=self.kwargs['pk'])

    @swagger_auto_schema(
        operation_description="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ —Å—á–µ—Ç—á–∏–∫–∞ –∏ –ø–æ–∫–∞–∑–∞–Ω–∏–π",
        manual_parameters=[],
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            properties={
                'counter_photo': openapi.Schema(
                    type=openapi.TYPE_FILE,
                    format=openapi.TYPE_FILE,  # üí• –í–ê–ñ–ù–û: –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ä–º–∞—Ç binary ‚Äî —ç—Ç–æ —Ñ–∞–π–ª
                    description='–§–æ—Ç–æ —Å—á–µ—Ç—á–∏–∫–∞'
                ),
                'counter_current_check': openapi.Schema(
                    type=openapi.TYPE_INTEGER,
                    description='–¢–µ–∫—É—â–µ–µ –ø–æ–∫–∞–∑–∞–Ω–∏–µ'
                ),
            },
            required=['counter_photo', 'counter_current_check']
        ),
        consumes=['multipart/form-data'],  # üí• –í–ê–ñ–ù–û: —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º multipart
        responses={200: PhotoUpdateSerializer()}
    )
    def patch(self, request, *args, **kwargs):
        return super().patch(request, *args, **kwargs)


# views.py

from rest_framework import generics, status
from rest_framework.response import Response
from drf_yasg.utils import swagger_auto_schema
from drf_yasg import openapi
from rest_framework import serializers

from .models import Check
from .serializers import CheckVerificationUpdateSerializer


@extend_schema(
    tags=['Admin Verified Photo']
)
class CheckVerificationUpdateAPIView(generics.UpdateAPIView):
    queryset = Check.objects.all()
    serializer_class = CheckVerificationUpdateSerializer
    http_method_names = ['patch']

    @swagger_auto_schema(
        operation_description="–û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –ø–æ–∫–∞–∑–∞–Ω–∏–µ –∏ —Ñ–ª–∞–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            properties={
                'counter_current_check': openapi.Schema(
                    type=openapi.TYPE_INTEGER, description='–¢–µ–∫—É—â–µ–µ –ø–æ–∫–∞–∑–∞–Ω–∏–µ'
                ),
                'verified': openapi.Schema(
                    type=openapi.TYPE_BOOLEAN, description='–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –ª–∏'
                ),
            },
            required=['counter_current_check', 'verified'],
        ),
        responses={200: CheckVerificationUpdateSerializer()}
    )
    def patch(self, request, *args, **kwargs):
        return super().patch(request, *args, **kwargs)

@extend_schema(
    tags=['Admin Verified Photo']
)
class CheckGetListUnverifiedAPIView(generics.ListAPIView):
    queryset = Check.objects.filter(verified=False).order_by('-created_at')
    serializer_class = CheckShortListUnverifiedSerializer
@extend_schema(
    tags=['Admin Verified Photo']
)
class CheckGetRetrieveUnverifiedAPIView(generics.RetrieveAPIView):
    queryset = Check.objects.all()
    serializer_class = CheckRetrieveUnverifiedSerializer






@extend_schema(
    tags=['Row Translation']
)
class CheckTranslationView(APIView):
    permission_classes = [AllowAny]

    def get(self, request, *args, **kwargs):
        translations = {
            "consumption": "–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ",
            "amount_for_expenses": "—Å—É–º–º–∞",
            "previous_check": "–ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è",
            "current_check": "—Ç–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è",
            "period_day_count": "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π",
            "total_sum": "–∏—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ",
            "pay_for_electricity": "–æ–ø–ª–∞—Ç–∞ –∑–∞ —ç–ª–µ—Ç—Ä–æ—ç–µ–Ω–µ—Ä–≥–∏—é",
            "counter_photo": "—Ñ–æ—Ç–æ —Å—á–µ—Ç—á–∏–∫–∞",
            "counter_current_check": "—Ç–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        }
        return Response(translations)
    


